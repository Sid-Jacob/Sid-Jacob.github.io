[{"title":"Hello World","url":"/2025/04/04/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["其他"],"categories":["其他"]},{"title":"爬取B站指定up主所有视频封面","url":"/2021/10/15/爬取B站指定up主所有视频封面/","content":"```python\n'''\n爬取B站指定up主所有视频封面\n'''\nimport requests, math, time, random, re, os\n\nstart = time.time()\n\nmid =   # 修改1，B站UP主的mid，从网址复制\nsave_dir = './tem/'  # 修改2，图片保存路径\n\nURL = 'https://api.bilibili.com/x/space/arc/search?mid={}&ps=30&tid=0&pn={}&keyword=&order=pubdate&jsonp=jsonp'\n\nif not os.path.exists(save_dir):\n    os.makedirs(save_dir)\nps = int(re.findall('ps=(.*?)&', URL)[0])\nres = requests.get(url=URL.format(mid, 1)).json()\ntotal_video_counts = res['data']['page']['count']\ntotal_pn_counts = math.ceil(total_video_counts / ps)\ntime.sleep(0.05)\n\nvideo_list = []\nfor i in range(total_pn_counts):\n    res = requests.get(url=URL.format(mid, i + 1)).json()\n    for item in res['data']['list']['vlist']:\n        tem_dict = {}\n        tem_dict['title'] = item['title']\n        tem_dict['pic'] = item['pic']\n        tem_dict['bvid'] = item['bvid']\n        video_list.append(tem_dict)\n    time.sleep(random.uniform(0.05, 0.2))\n\ndownload_counts = 0\nskip_counts = 0\nfor item in video_list:\n    # print(item['pic'])\n    image = requests.get(item['pic']).content\n    if '《' in item['title']:\n        title = re.findall('《(.*?)》', item['title'])[0]\n    else:\n        title = item['title']\n    if '/' in title:\n        title = title.replace('/', ',')\n    if '互动' in item['title']:\n        skip_counts += 1\n        continue\n    with open(save_dir + '{}_防{}重.jpg'.format(title, random.randint(1, 1000)),\n              'wb') as f:\n        f.write(image)\n        download_counts += 1\n    time.sleep(random.uniform(0.05, 0.2))\n\nend = time.time()\nprint('{}张封面下载完成，任务计时{}秒，跳过{}个互动视频'.format(download_counts,\n                                           round(end - start, 2), skip_counts))\n```\n\n————————————————\n\n参考链接：https://blog.csdn.net/Rookie_Max/article/details/112313636\n\n\n","tags":["爬虫"],"categories":["编程","杂","爬虫"]},{"title":"GitPage再会","url":"/2021/10/13/GitPage再会/","content":"#### Hexo常用的几个命令：\n\nhexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\nhexo server (hexo s) 启动本地web服务，用于博客的预览\nhexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）\n另外还有其他几个常用命令：\n\nhexo new \"postName\" #新建文章\n\nhexo new page \"pageName\" #新建页面\n\n常用简写\n\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n\n常用组合\n\nhexo d -g #生成部署\n\nhexo s -g #生成预览\n\n\n\n#### 分类和标签\n\n只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 `Foo, Bar` 不等于 `Bar, Foo`；而标签没有顺序和层次。\n\n```yaml\ncategories:\n- Diary\ntags:\n- PS3\n- Games\n```\n\n**分类方法的分歧**\n\n如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：\n\n```yaml\ncategories:\n  - Diary\n  - Life\n```\n\n会使分类`Life`成为`Diary`的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。\n\n如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。\n\n```yaml\ncategories:\n- [Diary, PlayStation]\n- [Diary, Games]\n- [Life]\n```\n\n此时这篇文章同时包括三个分类： `PlayStation` 和 `Games` 分别都是父分类 `Diary` 的子分类，同时 `Life` 是一个没有子分类的分类。\n\n\n\n#### 图片大小适应网页布局\n\n图片大小无法自适应div标签？如何控制渲染的缩放？hexo的标签似乎没有width这个参数设置的地方\n\n![image-20211013104840706](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013104840706.png)\n\n![image-20211013104859549](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013104859549.png)\n\np标签可以框柱图片大小，而div标签不行，直接修改img标签属性width=100%（height=auto）也可以。\n\np标签不能套在div标签外面，所以不能在模板里面改，只能控制markdown转换为html的逻辑，在img外面套p标签\n\nhttps://www.cnblogs.com/lovelvxia/p/5726316.html\n\n但如何控制markdown输出为html的时候将img包上p标签？（思路：如果无法控制转换过程，要么在css里面尝试修改img的属性，要么添加js改变html代码）\n\n换一种思路，利用theme自带的css，选中post-container下post-content内的所有img，设置width属性，大功告成（横向图片显示效果很好，但纵向图片显示过大）\n\n![image-20211013113431614](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013113431614.png)\n\n![image-20211013113715325](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013113715325.png)\n\n一开始想用expression表达式，但似乎这种用法已经被抛弃了，查阅css教程，直接用max-width就可以。\n\n![image-20211013125535030](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013125535030.png)\n\n纵向横向图片都能正常显示\n\n![image-20211013125604618](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013125604618.png)\n\n#### CSS 高度和宽度\n\nheight 和 width 属性不包括内边距、边框或外边距。它设置的是元素内边距、边框以及外边距内的区域的高度或宽度。\n\n##### CSS 高度和宽度值\n\nheight 和 width 属性可设置如下值：\n\n- auto - 默认。浏览器计算高度和宽度。\n- *length* - 以 px、cm 等定义高度/宽度。\n- % - 以包含块的百分比定义高度/宽度。\n- initial - 将高度/宽度设置为默认值。\n- inherit - 从其父值继承高度/宽度。\n\n##### 设置 CSS 尺寸属性\n\n| 属性                                                                   | 描述                 |\n| :--------------------------------------------------------------------- | :------------------- |\n| [height](https://www.w3school.com.cn/cssref/pr_dim_height.asp)         | 设置元素的高度。     |\n| [max-height](https://www.w3school.com.cn/cssref/pr_dim_max-height.asp) | 设置元素的最大高度。 |\n| [max-width](https://www.w3school.com.cn/cssref/pr_dim_max-width.asp)   | 设置元素的最大宽度。 |\n| [min-height](https://www.w3school.com.cn/cssref/pr_dim_min-height.asp) | 设置元素的最小高度。 |\n| [min-width](https://www.w3school.com.cn/cssref/pr_dim_min-width.asp)   | 设置元素的最小宽度。 |\n| [width](https://www.w3school.com.cn/cssref/pr_dim_width.asp)           | 设置元素的宽度。     |\n\n可以用长度值（例如 px、cm 等）或包含块的百分比（％）来指定 max-width（最大宽度），也可以将其设置为 none（默认值。意味着没有最大宽度）。\n\n\n\n#### 添加categories页面\n\n分类：https://blog.csdn.net/muzilanlan/article/details/81542917\n\n多级分类：https://www.jianshu.com/p/7d0c5e30e0f3\n\n官方文档说明：https://hexo.io/zh-cn/docs/variables\n\n讲的最透彻的文档：https://github.com/hughshen/blog/blob/c3390a5a99cfcf398a012a9cf742b7f41b49d345/app/posts/1437904915000-hexo-modify-theme.md\n\ncategories存放分类目录页，category存放某分类下的文章页。\n\nhexo new page categories后，在source文件夹下会新建一个categories目录和index.md，这个index.md只需要修改其Front-matter的属性，如下：![image-20211013165810378](GitPage%E5%86%8D%E8%A7%81.assets/image-20211013165810378.png)\n\n最重要的是layout，这个参数值对应theme下layout目录中ejs模板。模板按照上文的链接设置即可。\n\n#### 安装图片链接转换插件\n\ncnpm install https://github.com/xcodebuild/hexo-asset-image --save\n\n报错Cannot find module 'hexo'：\n\n```\nnpm install hexo --save\n```\n\nTODO:\n\n图床、categories页的css样式","tags":["GitPage"],"categories":["编程","杂","GitPage"]},{"title":"GitPage初见","url":"/2021/10/12/GitPage初见/","content":"### 搭建GitPage\n\n---\n\n1. ##### 参考教程\n\n[Git Pages + Jekyll/Hexo搭建自己的博客](https://blog.csdn.net/muzilanlan/article/details/81542917)\n\n[hexo的环境搭建](https://www.cnblogs.com/zhvon/p/5351043.html)\n\n---\n\n2. ##### 配置步骤\n\n安装Node.js\n\nWindows下用安装包安装Node.js，注意选中Add to Path，在命令行用\n\n```sh\necho %PATH%\n```\n\n检查是否添加环境变量成功\n\n安装Hexo\n\n```sh\nnpm install -g hexo-cli\n```\n\n配置npm代理（失败）\n\n[npm安装报错 rollbackFailedOptional]: https://blog.csdn.net/weixin_42097653/article/details/82222432\n\n```sh\nnpm config set proxy http://127.0.0.1:7890\n\nnpm config set https-proxy http://127.0.0.1:7890\n```\n\n换源+取消代理\n\n```sh\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\nnpm config delete proxy\n\nnpm config delete https-proxy\n```\n\n用cnpm安装Hexo（成功）\n\n```sh\ncnpm install -g hexo-cli\n```\n\n\n{% asset_img image-20211011233002637.png  %}\n\n\n进入Sid-Jacob.github.io文件夹\n\n```sh\nhexo init\n```\n\n（失败）\n\n\n{% asset_img image-20211011235429217.png  %}\n\n可以看到clone成功，但insatll dependencies卡住，网络问题\n\n使用npm install安装依赖（失败）\n\n```sh\ncnpm install\n```\n\n（成功）\n\n[关于hexo init过程中出现fail to install dependencies的解决](https://www.cnblogs.com/moyidou/p/15254076.html){% asset_img image-20211011235808391.png  %}\n\n\n安装完后的目录结构\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   └── _posts\n└── themes\n```\n\n修改_config.yml进行配置\n\nhttps://hexo.io/zh-cn/docs/configuration\n\nhttp://ijiaober.github.io/2014/08/05/hexo/hexo-04/\n\n```\n# Category & Tagdefault_category: uncategorizedcategory_map:\t编程: programming\t生活: life\t其他: othertag_map:\n```\n\n添加插件、主题\n\nhttps://hexo.io/plugins/\n\nhttps://github.com/edolphin-ydf/hexo-encrypt\n\nhttps://github.com/HCLonely/hexo-bilibili-bangumi\n\nhttps://hexo.io/themes/\n\n添加主题\n\nhttp://ijiaober.github.io/2014/08/05/hexo/hexo-06/\n\nhttps://github.com/aircloud/hexo-theme-aircloud\n\n运行Hexo命令\n\n```sh\n$ hexo g #hexo generate 生成$ hexo s #启动本地web服务器\n```\n\n中途报错\n\n```\nValidationError: `slug` is required!\n```\n\n{% asset_img image-20211012005202636.png  %}\n\nGoogle了一圈发现...\n\nhttps://github.com/hexojs/hexo/issues/1099\n\n\n{% asset_img image-20211012005032236.png width=100% %}\n\n之前改成了untitled.md，改回默认的title.md就不报错了。\n\n启动Hexo\n\n\n{% asset_img image-20211012005353568.png  %}\n\n此时图片无法加载（将config里面语言改为zh，和theme里面一致，则home、tag、archive、about可根据theme配置显示为中文）\n\n\n{% asset_img image-20211012195022141.png  %}\n\n发现是图片的链接生成错误，手动修改链接后显示成功。\n\n\n{% asset_img image-20211012212716126.png  %}\n\n根据经验，hexo g命令根据theme的某个模板生成index等等页面的代码。查看目录结构，可以发现layout下面有页面的模板和partial页面模板，而该主题的用户头像在每个页面都会显示，故猜测其生成模板在partial目录下面。最终，在nav.ejs文件中找到对应位置。\n\n\n{% asset_img image-20211012212811606.png  %}\n\n\n{% asset_img image-20211012213030439.png  %}\n\n根据其用法，可以猜测我们需要在config文件中添加root参数和sidebar-avatar参数，如下：\n\n\n{% asset_img image-20211012213134836.png  %}\n\n重新hexo clean && hexo g && hexo s，图片显示成功！\n\n小bug：貌似hexo d上传不会检测同名文件，如将favicon.ico文件替换之后上传，favicon.ico并没有被替换，重命名后才检测到。(按道理应该是检测hash值有没有变化来决定是否更新文件)\n\n\n{% asset_img image-20211012213825868.png  %}\n\n部署到Gitpage上：在config里面设置，然后hexo d即可\n\n\n{% asset_img image-20211012214503181.png  %}\n\n\n（2021.10.12）","tags":["GitPage"],"categories":["编程","杂","GitPage"]}]